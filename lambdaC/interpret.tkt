/*
 * Thicket
 * https://github.com/d-plaindoux/thicket
 *
 * Copyright (c) 2015-2016 Didier Plaindoux
 * Licensed under the LGPL2 license.
 */
 
module Example.Lambda.Interpret

import Data

from Example.Lambda.Term import *
from Example.Lambda.Value import *

class interpreter this:LambdaTerm {
    eval : Environment -> try[value]
} {
    def Constant.eval env = success $ value $ CstVal this.value

    def Variable.eval env = 
    	env find this.name fold (failure $ "Unbound variable: " + this.name) success
                                       
    def Application.eval env = 
        for a <- { interpreter this.abstraction eval env }
            p <- { interpreter this.argument eval env }
            v <- { a fold (_   -> failure "Waiting for a function") 
                          (a e -> interpreter a._2 eval $ e add a._1 p) }
        yield v
        
    def Abstraction.eval env = success $ value $ Closure (this.variable,this.body) env    
}

def interpret : LambdaTerm -> try[value] = term -> { interpreter term eval newHashmap }