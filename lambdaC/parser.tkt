/*
 * Thicket
 * https://github.com/d-plaindoux/thicket
 *
 * Copyright (c) 2015-2016 Didier Plaindoux
 * Licensed under the LGPL2 license.
 */
 
module Example.Lambda.Parser

import Data

from Parser.LL import *
from Parser.Genlex import *
from Parser.Token import *
from Parser.Tokenizer import *
from Example.Lambda.Term import *

def termParser : Parser[LambdaTerm,Token] = {
  simpleTermParser ~ (lazy (termParser?)) map $ p -> p._2 fold p._1 (Application p._1)
}

def simpleTermParser : Parser[LambdaTerm,Token] = {
  (tkNumber map Constant)
| (tkIdent ~ (tkKey "->" ~> termParser ?) map $ p -> p._2 fold (Variable p._1) (Abstraction p._1))
| ((tkKey"(") ~> termParser <~ (tkKey ")"))
}

def tokenize : string -> try[Sequence[Token]] = {
    let keywords = List["->";"(";")"] in
        tokenize from Parser.Tokenizer $ genlex keywords
}

def decode : string -> try[LambdaTerm] = s -> { 
    for tokens <- { tokenize s }
        term   <- { termParser <~ eos parse tokens 0 toTry }
    yield term
}