/*
 * Thicket
 * https://github.com/d-plaindoux/thicket
 *
 * Copyright (c) 2015-2016 Didier Plaindoux
 * Licensed under the LGPL2 license.
 */

module Example.TodoMVC.Application

from Client.Document import *
from Client.Dom import *
from Client.Event.Mouse import *
from Client.Event.Key import *
from Client.Document.Renderer import *

from Lang.Do import do
from Lang.When import when

from Logic.Combinators import combinators

from Data.Unit import unit
from Data.String import string
from Data.Number import number
from Data.Option import *
from Data.Boolean import *

from Example.TodoMVC.Models import *
from Example.TodoMVC.Controller import controller

class application this:controller {
    render : application
} {
    // -----------------------------------------------------------------------------------------------
    // Private behaviors
    // -----------------------------------------------------------------------------------------------
    
    def todoStatusView : Todo -> dom = t ->
        <input type="checkbox" class="toggle" checked if t.completed />
        onMouseEvent MouseClick $ _ -> application (this toggle t.id) render
        
    def todoEditView : Todo -> dom = t ->
        <li id=("todo_" + t.id) class="completed" if t.completed> $
            <input class="edit" value=t.title autofocus/>             
            onKeyEvent KeyPress $ d n -> 
                when (n == keys.CARRIAGE_RETURN)
                then { d value fold self $ s -> application (this change t.id s) render }
                else self
        </li>
        
    def todoView : Todo -> dom = t ->
        <li id=("todo_" + t.id) class="completed" if t.completed> $
            <div class="view">  
                {self todoStatusView t}
                <label> t.title </label> $
                <button id=("todo_destroy_" + t.id) class="destroy"/>
                onMouseEvent MouseClick $ _ -> application (this remove t.id) render
            </div>
            onMouseEvent MouseDblClick $ _ -> application (this edit t.id) render
        </li>

    def viewItems : dom = 
        let r = this todosLeft in
            <span id="todo-count">
                <strong> r " " </strong> $ 
                when (r <? 2) then "item left" else "items left"
            </span>

    def filtersView : dom =
        <ul id="filters">
            <li> $
              <a href="#" class="selected" if (this.filter == all)>
                 "All" 
              </a>
              onMouseEvent MouseClick $ _ -> application (this filtering all) render
            </li>
            <li> $
              <a href="#" class="selected" if (this.filter == active)> 
                "Active" 
              </a>
              onMouseEvent MouseClick $ _ -> application (this filtering active) render
            </li>
            <li> $
              <a href="#" class="selected" if (this.filter == completed)> 
                 "Completed"
              </a>
              onMouseEvent MouseClick $ _ -> application (this filtering completed) render
            </li>
        </ul>

    def clearCompletedView : dom =
        <button id="clear-completed"> 
            "Clear completed" 
        </button>            
        onMouseEvent MouseClick $ _ -> application (this clearCompleted) render
        
    def toggleAllView : dom = 
        <input id="toggle-all" type="checkbox"
               checked if this.completed
               class="hidden" if (this.length == 0)/>
        onMouseEvent MouseClick $ _ -> application (this completeAll) render
    
    def inputTodoView : dom = 
        <input id="new-todo" placeholder="What needs to be done?" autofocus/>
        onKeyEvent KeyPress $ d n -> 
            when (n == keys.CARRIAGE_RETURN)
            then { d value fold self $ s -> application (this add s) render} 
            else self
             
    def todoListView : dom =
        let editedTodo = t -> this.edited fold false (t.id ==) in
            <ul id="todo-list">
                for t <- { this.todos }
                yield {
                    when (editedTodo t)
                    then {self todoEditView t}
                    else {self todoView t} 
                }
            </ul>

    def footerView : dom = 
        <footer id="footer" class="hidden" if (this length == 0)>
            self.viewItems
            self.filtersView
            self.clearCompletedView
        </footer>
        
    def renderAll : Renderer =
        documentRenderer 
            <~ { self toggleAllView }
            <~ { self inputTodoView }
            <~ { self todoListView  }
            <~ { self footerView    }

    // -----------------------------------------------------------------------------------------------
    // Public methods
    // -----------------------------------------------------------------------------------------------

    def render =
        do { 
            self renderAll
        } return self
}
