/*
 * Thicket
 * https://github.com/d-plaindoux/thicket
 *
 * Copyright (c) 2015-2016 Didier Plaindoux
 * Licensed under the LGPL2 license.
 */
 
module Example.Fibonacci
 
from Data.Pair import Pair
from Data.Number import number
from Data.Array import array,emptyArray
 
//
// Fibonacci suite fast implementation based on memoisation
// Not tail recursive
//

def fastfib : array[number] -> number -> (array[number],number) = a n -> {
    n <? 2 fold 
        { a,n }
        { a get n map { 
            r -> a,r 
          } orElse { 
            let r1 = fastfib a (n - 1) in
            let r2 = fastfib r1._1 (n - 2) in
            let r  = r1._2 + r2._2 in 
                (r2._1 set n r),r 
          }
        }
}
    
def fib : number -> number = n -> {
    fastfib (emptyArray n) n _2
}
