/*
 * Thicket
 * https://github.com/d-plaindoux/thicket
 *
 * Copyright (c) 2015-2016 Didier Plaindoux
 * Licensed under the LGPL2 license.
 */

module Example.Life.Game.Test

import Data

import Spec.Core
import Spec.Logger.Console

import Example.Life.Game

def worldAssertions : TestLogger -> unit = l -> {
    let world : World = p -> when (p.x == p.y) then alive else dead in
    description l "World Assertions"
        it "expect (world $ Pos 1 1) toBe alive" {
            expect (world $ Pos 1 1) toBe alive
        }
        it "expect (world $ Pos 1 2) toBe dead" {
            expect (world $ Pos 1 2) toBe dead
        }
    done 
}                

def neighboursAssertions : TestLogger -> unit = l -> {
    let world : World = p -> when (p.x == p.y) then alive else dead in
    description l "Neighbours Assertions"
        it "expect (neighbours world $ Pos 1 1) toBe 2" {
            expect (neighbours world $ Pos 1 1) toBe 2
        }
        it "expect (neighbours world $ Pos 2 1) toBe 2" {
            expect (neighbours world $ Pos 2 1) toBe 2
        }
        it "expect (neighbours world $ Pos 3 1) toBe 1" {
            expect (neighbours world $ Pos 3 1) toBe 1
        }
        it "expect (neighbours world $ Pos 4 1) toBe 0" {
            expect (neighbours world $ Pos 4 1) toBe 0
        }
    done 
}                

def rulesAssertionsEmptyBoard : TestLogger -> unit = l -> {
    let world : World = p -> dead in
    description l "Rules Assertions for Empty Board"
        it "expect (world $ Pos 1 1) toBe dead" {
            expect (world $ Pos 1 1) toBe dead
        }
        it "expect (next world $ Pos 1 1) toBe dead" {
            expect (next world $ Pos 1 1) toBe dead
        }
    done 
}                

def rulesAssertionsFullBoard : TestLogger -> unit = l -> {
    let world : World = p -> alive in
    description l "Rules Assertions for Full Board"
        it "expect (world $ Pos 1 1) toBe alive" {
            expect (world $ Pos 1 1) toBe alive
        }
        it "expect (next world $ Pos 1 1) toBe dead" {
            expect (next world $ Pos 1 1) toBe dead
        }
    done 
}                

def rulesAssertionsWhenUnique : TestLogger -> unit = l -> {
    let world : World = p -> (p.x == 1) && (p.y == 1) fold alive dead in
    description l "Rules Assertions for Single Cell Board"
        it "expect (world $ Pos 1 1) toBe alive" {
            expect (world $ Pos 1 1) toBe alive
        }
        it "expect (next world $ Pos 1 1) toBe dead" {
            expect (next world $ Pos 1 1) toBe dead
        }
    done 
}

def rulesAssertions1stLineAliveBoard : TestLogger -> unit = l -> {
    let world : World = p -> p.x <? 1 fold alive dead in
    description l "Rules Assertions for 1st line alive Board"
        // Position 1 1
        it "expect (world $ Pos 1 1) toBe dead" {
            expect (world $ Pos 1 1) toBe dead
        }
        it "expect (next world $ Pos 1 1) toBe alive" {
            expect (next world $ Pos 1 1) toBe alive
        }
        it "expect (next (next world) $ Pos 1 1) toBe alive" {
            expect (next (next world) $ Pos 1 1) toBe alive
        }
        // Position 0 1
        it "expect (world $ Pos 0 1) toBe alive" {
            expect (world $ Pos 0 1) toBe alive
        }
        it "expect (next world $ Pos 0 1) toBe dead" {
            expect (next world $ Pos 0 1) toBe dead
        }
        it "expect (next (next world) $ Pos 0 1) toBe alive" {
            expect (next (next world) $ Pos 0 1) toBe alive
        }
    done 
}                
      
do {
List[worldAssertions;
     neighboursAssertions;
     rulesAssertionsEmptyBoard;
     rulesAssertionsFullBoard;
     rulesAssertionsWhenUnique;
     rulesAssertions1stLineAliveBoard] each (r -> r consoleLogger)
} return ()
