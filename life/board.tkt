
/*
 * Thicket
 * https://github.com/d-plaindoux/thicket
 *
 * Copyright (c) 2015-2016 Didier Plaindoux
 * Licensed under the LGPL2 license.
 */
 
module Example.Life.Board

import Boot.Client
import Example.Life.Game

def cellId : number -> number -> Pos = i j -> {
    Pos i j
}

def adapter pos2id : Pos -> string = p -> {
    $"cell-$(p.x):$(p.y)"
}

def boardCell : Pos -> option[dom] = pos -> {
    document (cellId pos.x pos.y) find
}

def renderCell : World -> Pos -> unit = world pos -> {
    let state = world pos in
        do { 
          for cell <- { boardCell pos }
          yield state fold 
                    { cell addEmptyAttribute "alive" }
                    { cell removeAttribute "alive" }
        } return ()
}      

def renderWorld : number -> World -> unit = size world -> {
    1 to size fold () $ _ i ->
    1 to size fold () $ _ j ->    
    do { 
      renderCell world $ Pos i j 
    } return ()
}

def createWorld : number -> Renderer = size -> {
    documentRenderer <~
        <table id="board" border=1>
            for i <- (1 .. size) yield 
            <tr> 
                for j <- (1 .. size) yield 
                <td id=(cellId i j)/> 
            </tr> 
        </table>
}

